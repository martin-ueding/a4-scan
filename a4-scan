#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2012 Martin Ueding <dev@martin-ueding.de>

###############################################################################
#                              License (GPL 2+)                               #
###############################################################################
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.

import argparse
import os.path
import re
import subprocess
import sys
import threading

__docformat__ = "restructuredtext en"

_printed_command = False
"""
Whether the command was already printed out. This is just for use within this
module.

:type: bool
"""

def main():
    options = _parse_args()

    if options.yes:
        scan(options)
    else:
        while True:
            scan(options)

def next_name(options):
    """
    Generates the next file name. It will increase the number until there is no
    file named like that. That will, it will choose the lowest possible number
    at all times.

    This is not an atomic operation, so this is not concurrency safe.

    :return: Next file name.
    :rtype: str
    """
    number = 1
    name = ""
    while True:
        name = options.pattern.format(number=number)
        if not os.path.isfile(name):
            break
        number += 1

    return name

def scan(options):
    """
    The ``options`` argument should contain the following:

    - color (bool)
    - resolution (int)

    :rtype: None
    """
    resolution = options.factor * options.resolution if options.oversample else options.resolution
    filename = next_name(options)
    command = [
        "scanimage",
        "--format=tiff",
        "--mode={mode}".format(mode="color" if options.color else "gray"),
        "--resolution={resolution}".format(resolution=resolution),
        "-x 210",
        "-y 297",
    ]

    global _printed_command

    if not _printed_command:
        print("{command} > {filename}".format(
            command=' '.join(command),
            filename=filename,
        ))

        _printed_command = True

    if not options.yes:
        ask()

    errors = []
    for trial in range(2):
        try:
            run_scan(command, filename)
        except subprocess.CalledProcessError as e:
            os.remove(filename)
            errors.append(e)

            if trial == 0:
                print("Oops, there was a glitch. Trying again …")
            else:
                print("Okay, no way to recover. Here are the errors:")
                for error in errors:
                    print(error)
        else:
            if options.postprocess or options.oversample:
                thread = PostProcess(filename, options)
                thread.start()
            break

def run_scan(command, filename):
    """
    Runs the scan command.


    :param command: Scan command.
    :type command: str
    :param filename: Where to save the scanned file.
    :type filename: str
    :rtype: None
    """
    with open(filename, "w") as outfile:
        subprocess.check_call(command, stdout=outfile)

def ask():
    """
    Asks the user whether he wants to continue. If not, the program is exited
    right here.
    """
    try:
        user_input = input("continue? [Y/n] ").strip()
        if any([user_input == char for char in ["n", "N"]]):
            sys.exit(0)
    except KeyboardInterrupt:
        # The user pressed CTRL-C, so we just quit here, leaving the terminal
        # with a new line.
        print()
        sys.exit(0)

class PostProcess(threading.Thread):
    def __init__(self, filename, options):
        self.filename = filename
        self.options = options

    def run(self):
        """
        Applies post processing to a file. ``scanimage`` will produce TIFF files
        which I do not use a lit. I usually use JPEG or PDF files. This method will
        apply contrast levels and rescale the image.
        """

        # convert 003.tiff -level 9%,85% -resize 50% -quality 90 003.jpg

        # Build up the ``convert`` command.
        command_parts = ["convert", self.filename]

        basename = re.sub(r"\.tiff?$", "", self.filename)

        command_parts += ["-level", self.options.level]


        if self.options.oversample:
            command_parts += ["-resize", "{res}%".format(res=int(100/self.options.factor))]

        if self.options.pdf:
            outfile = "{basename}.pdf".format(basename=basename)
            command_parts += [outfile]
        else:
            outfile = "{basename}.jpg".format(basename=basename)
            command_parts += ["-quality", str(self.options.quality), outfile]

        print(outfile)

        print(' '.join(command_parts))

        try:
            subprocess.check_call(command_parts)
        except subprocess.CalledProcessError as e:
            print(e)
            shutil.remove(outfile)

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="Wrapper for ``scanimage`` that recovers from glitches, automatically numbers file and can do some post processing.")
    parser.add_argument("--color", dest="color", action="store_true", help="Switch to color")
    parser.add_argument("--factor", dest="factor", type=int, default=2, help="Oversampling factor [default: %(default)s]")
    parser.add_argument("--level", dest="level", type=str, default="9%,85%", help="Level option for ``convert -level`` [default: %(default)s]")
    parser.add_argument("-s", "--oversample", dest="oversample", action="store_true", help="Will scan with twice the resolution and rescale the image for better results.")
    parser.add_argument("-p", "--postprocess", dest="postprocess", action="store_true", help="Enable post processing")
    parser.add_argument("--pattern", dest="pattern", type=str, default="{number:03d}.tiff", help="Name pattern [default: %(default)s]")
    parser.add_argument("--pdf", dest="pdf", action="store_true", help="Convert scanned image into PDF afterwards.")
    parser.add_argument("--quality", dest="quality", type=int, default=90, help="JPEG quality in %% [default: %(default)s].")
    parser.add_argument("--resolution", dest="resolution", type=int, default=300, help="Scan resolution")
    parser.add_argument("-y", dest="yes", action="store_true", help="Scan a single document right away")

    return parser.parse_args()

if __name__ == "__main__":
    main()
