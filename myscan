#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright Â© 2012 Martin Ueding <dev@martin-ueding.de>

import argparse
import datetime
import os.path
import subprocess
import time

__docformat__ = "restructuredtext en"

def main():
    options = _parse_args()

    print """Options
=======
"""

    if options.color:
        print "- color"
    else:
        print "- grayscale"

    print "-", options.resolution, "DPI"
    print

    while True:
        try:
            if len(raw_input("Press Enter to scan, enter anything to abort.").strip()) != 0:
                break
        except KeyboardInterrupt:
            # The user pressed CTRL-C, so we just quit here, leaving the terminal with a new line.
            print
            break
        scan(options)

def next_name(options):
    number = 1
    name = ""
    while True:
        name = options.pattern.format(number=number)
        if not os.path.isfile(name):
            break
        number += 1

    return name

def scan(options):
    filename = next_name(options)
    command = [
        "scanimage",
        "--format=tiff",
        "--mode=color" if options.color else "--mode=gray",
    ]

    print "Scanning with ``{command}`` into {filename}.".format(
        command=' '.join(command),
        filename=filename,
    )

    start = datetime.datetime.now()
    try:
        with open(filename, "w") as outfile:
            subprocess.check_call(command, stdout=outfile)
    except CalledProcessError as e:
        os.remove(filename)
    else:
        end = datetime.datetime.now()
        duration = (end-start).seconds
        global last_time
        last_time = duration

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(usage="", description="")
    parser.add_argument("--color", dest="color", action="store_true", help="Switch to color")
    parser.add_argument("--resolution", dest="resolution", type=int, default=300, help="Scan resolution")
    parser.add_argument("--pattern", dest="pattern", type=str, default="{number:03d}.tiff", help="Name pattern")

    return parser.parse_args()

if __name__ == "__main__":
    main()
