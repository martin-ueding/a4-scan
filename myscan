#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright © 2012 Martin Ueding <dev@martin-ueding.de>

import argparse
import os.path
import subprocess
import sys

__docformat__ = "restructuredtext en"

printed_command = False

def main():
    options = _parse_args()

    while True:
        scan(options)

def next_name(options):
    number = 1
    name = ""
    while True:
        name = options.pattern.format(number=number)
        if not os.path.isfile(name):
            break
        number += 1

    return name

def scan(options):
    """
    The ``options`` argument should contain the following:

    - color (bool)
    - resolution (int)
    """
    filename = next_name(options)
    command = [
        "scanimage",
        "--format=tiff",
        "--mode={mode}".format(mode="color" if options.color else "gray"),
        "--resolution={resolution}".format(resolution=options.resolution),
        "-x 210",
        "-y 297",
    ]

    global printed_command

    if not printed_command:
        print "{command} > {filename}".format(
            command=' '.join(command),
            filename=filename,
        )

        printed_command = True

    ask()

    try:
        run_scan(command, filename)
    except subprocess.CalledProcessError as e1:
        os.remove(filename)
        try:
            print "Oops, there was a glitch. Trying again …"
            run_scan(command, filename)
        except subprocess.CalledProcessError as e2:
            print "Okay, no way to recover. Here are the errors:"
            print "Error 1:", e1
            print "Error 2:", e2

def run_scan(command, filename):
    with open(filename, "w") as outfile:
        subprocess.check_call(command, stdout=outfile)

def ask():
    """
    Asks the user whether he wants to continue. If not, the program is exited
    right here.
    """
    try:
        user_input = raw_input("continue? [Y/n] ").strip()
        if any(map(lambda char: user_input == char, ["n", "N"])):
            sys.exit(0)
    except KeyboardInterrupt:
        # The user pressed CTRL-C, so we just quit here, leaving the terminal with a new line.
        print
        sys.exit(0)

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(usage="", description="")
    parser.add_argument("--color", dest="color", action="store_true", help="Switch to color")
    parser.add_argument("--resolution", dest="resolution", type=int, default=300, help="Scan resolution")
    parser.add_argument("--pattern", dest="pattern", type=str, default="{number:03d}.tiff", help="Name pattern")

    return parser.parse_args()

if __name__ == "__main__":
    main()
